plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot 기본 의존성
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	// 데이터베이스 (MariaDB)
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.4.1'	
	
	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-config:6.2.1'
	implementation 'org.springframework.security:spring-security-crypto:6.2.1'

	// Json 
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'	
    implementation 'net.minidev:json-smart:2.4.7'

	// QueryDSL 라이브러리 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// AWS S3 최신 버전
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.6.RELEASE'
	
	//  json-smart 라이브러리가 누락 추가
	implementation 'net.minidev:json-smart:2.4.8'
	
	// JJWT 라이브러리 의존성이 잘못되어서 내부 클래스 추가	
}

tasks.named('test') {
	useJUnitPlatform()
}

	// 엔티티가 생성되는 폴더
	def querydslDir = "src/main/generated"
	
	sourceSets {
		main.java.srcDirs += [ querydslDir ]
	}
	tasks.withType(JavaCompile) {
		options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
	}
	clean.doLast {
		file(querydslDir).deleteDir()
	}
	
	test {
		exclude '**/*'
	}
